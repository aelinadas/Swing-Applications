/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Aircraft;
import Business.Airliner;
import Business.Customer;
import Business.Flight;
import Business.TravelAgency;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ViewBookingsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewBookingsJPanel
     */
    private JPanel displayPanel;
    private TravelAgency travelAgency;

    ViewBookingsJPanel(TravelAgency travelAgency, JPanel displayPanel) {
        initComponents();
        this.travelAgency = travelAgency;
        this.displayPanel = displayPanel;
        populate(travelAgency.getCustomerDirectory());
    }

    private void populate(ArrayList<Customer> customerDirectory) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) bookingsTable.getModel();
        defaultTableModel.setRowCount(0);
        for (Customer customer : customerDirectory) {
            if (customer.getTicket() != null) {
                boolean cancelled = false;
                boolean found = false;
                for (Airliner a : travelAgency.getAirlinerDirectory()) {
                    if (cancelled || found) {
                        break;
                    }
                    for (Aircraft af : a.getAircraftDirectory()) {
                        if (cancelled || found) {
                            break;
                        }
                        for (Flight f : af.getFlightDirectory()) {
                            if (f.getFlightNumber().equalsIgnoreCase(customer.getTicket().getFlightNumber())) {
                                found = true;
                                if (!f.isIsAvailable()) {
                                    cancelled = true;
                                    customer.getTicket().setIsAvailable("Flight Cancelled");
                                    break;
                                } else {
                                    customer.getTicket().setIsAvailable("On Time");
                                    break;
                                }
                            }
                        }
                    }
                }
                Object[] row = new Object[5];
                row[0] = customer.getTicket().getFlightNumber();
                row[1] = customer.getTicket().getTicketNumber();
                row[2] = customer;
                row[3] = customer.getTicket().getBookingDate();
                row[4] = customer.getTicket().isIsAvailable();
                defaultTableModel.addRow(row);
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookingsTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        flightNumberTextField = new javax.swing.JTextField();
        customerNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        viewTicketButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        bookingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight Number", "Ticket Number", "Customer User Name", "Booking Date and Time", "Flight Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bookingsTable);
        if (bookingsTable.getColumnModel().getColumnCount() > 0) {
            bookingsTable.getColumnModel().getColumn(0).setResizable(false);
            bookingsTable.getColumnModel().getColumn(1).setResizable(false);
            bookingsTable.getColumnModel().getColumn(2).setResizable(false);
            bookingsTable.getColumnModel().getColumn(3).setResizable(false);
            bookingsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Flight Number:");

        jLabel3.setText("Customer Username:");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        viewTicketButton.setText("View Ticket");
        viewTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTicketButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("VIEW BOOKINGS");
        jLabel6.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(viewTicketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(flightNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(172, 172, 172)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(searchButton)
                    .addComponent(viewTicketButton)
                    .addComponent(customerNameTextField))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(flightNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(282, 282, 282))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        displayPanel.remove(this);
        CardLayout cardLayout = (CardLayout) displayPanel.getLayout();
        cardLayout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTicketButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookingsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select A Booking", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Customer customer = (Customer) bookingsTable.getValueAt(selectedRow, 2);
            WelcomeJPanel welcomeJpanel = new WelcomeJPanel(displayPanel, customer);
            displayPanel.add("WelcomeJpanel", welcomeJpanel);
            CardLayout cardLayout = (CardLayout) displayPanel.getLayout();
            cardLayout.next(displayPanel);

        }
    }//GEN-LAST:event_viewTicketButtonActionPerformed

    public ArrayList<Customer> getBookingWithFlightNumber(ArrayList<Customer> customerDirectory, String flightNumber) {
        ArrayList<Customer> temp = new ArrayList<Customer>();
        for (Customer customer : customerDirectory) {
            if (customer.getTicket() != null && customer.getTicket().getFlightNumber().equals(flightNumber)) {
                temp.add(customer);
            }
        }
        if (!temp.isEmpty()) {
            return temp;
        }
        return null;
    }

    public ArrayList<Customer> getBookingWithCustomerUserName(ArrayList<Customer> customerDirectory, String customerUserName) {
        ArrayList<Customer> temp = new ArrayList<Customer>();
        for (Customer customer : customerDirectory) {
            if (customer.getTicket() != null && customer.getTicket().getUserName().equals(customerUserName)) {
                temp.add(customer);
            }
        }
        if (!temp.isEmpty()) {
            return temp;
        }
        return null;
    }

    public ArrayList<Customer> getBookingWithFlightNumberUserName(ArrayList<Customer> customerDirectory, String flightNumber, String customerUserName) {
        ArrayList<Customer> temp = new ArrayList<Customer>();
        for (Customer customer : customerDirectory) {
            if (customer.getTicket() != null && customer.getTicket().getFlightNumber().equals(flightNumber) && customer.getTicket().getUserName().equals(customerUserName)) {
                temp.add(customer);
            }
        }
        if (!temp.isEmpty()) {
            return temp;
        }
        return null;
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        if (flightNumberTextField.getText().equals("") && customerNameTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter either flight number or customer username", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        if (!flightNumberTextField.getText().equals("") && customerNameTextField.getText().equals("")) {
            ArrayList<Customer> results = getBookingWithFlightNumber(travelAgency.getCustomerDirectory(), flightNumberTextField.getText().trim());
            if (results != null) {
                populate(results);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry !! No Bookings exist with this flight number", "Warning", JOptionPane.WARNING_MESSAGE);
                flightNumberTextField.setText("");
                populate(travelAgency.getCustomerDirectory());
            }
        }
        if (flightNumberTextField.getText().equals("") && !customerNameTextField.getText().equals("")) {
            ArrayList<Customer> results = getBookingWithCustomerUserName(travelAgency.getCustomerDirectory(), customerNameTextField.getText().trim());
            if (results != null) {
                populate(results);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry !! No Bookings exist with this Customer UserName", "Warning", JOptionPane.WARNING_MESSAGE);
                customerNameTextField.setText("");
                populate(travelAgency.getCustomerDirectory());
            }
        }
        if (!flightNumberTextField.getText().equals("") && !customerNameTextField.getText().equals("")) {
            ArrayList<Customer> results = getBookingWithFlightNumberUserName(travelAgency.getCustomerDirectory(), flightNumberTextField.getText().trim(), customerNameTextField.getText().trim());
            if (results != null) {
                populate(results);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry !! No Bookings exist with this Flight Number and Customer UserName", "Warning", JOptionPane.WARNING_MESSAGE);
                flightNumberTextField.setText("");
                customerNameTextField.setText("");
                populate(travelAgency.getCustomerDirectory());
            }

        }

    }//GEN-LAST:event_searchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable bookingsTable;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JTextField flightNumberTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton viewTicketButton;
    // End of variables declaration//GEN-END:variables
}
