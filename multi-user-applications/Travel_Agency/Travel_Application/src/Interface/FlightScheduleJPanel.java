/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Aircraft;
import Business.Airliner;
import Business.Flight;
import Business.TravelAgency;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class FlightScheduleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookASeatJPanel
     */
    private TravelAgency travelAgency;
    private String role;
    private JPanel displayPanel;
    private double defaultMax = 0;

    FlightScheduleJPanel(TravelAgency travelAgency, JPanel displayPanel, String role) {
        initComponents();
        this.travelAgency = travelAgency;
        this.displayPanel = displayPanel;
        this.role = role;
        defaultMax = setCurrentMax();
        populateFlight();
        maxTextField.setText(defaultMax + "");
    }

    public double setCurrentMax() {
        for (Airliner airliner : travelAgency.getAirlinerDirectory()) {
            for (Aircraft aircraft : airliner.getAircraftDirectory()) {
                for (Flight flight : aircraft.getFlightDirectory()) {
                    if (defaultMax < flight.getPrice()) {
                        defaultMax = flight.getPrice();
                    }
                }

            }
        }
        return defaultMax;
    }

    public void populateFlight() {

        DefaultTableModel defaultTableModel = (DefaultTableModel) flightScheduleTable.getModel();
        defaultTableModel.setRowCount(0);
        String airlinerName = "";
        for (Airliner airliner : travelAgency.getAirlinerDirectory()) {
            airlinerName = airliner.getAirlinerName();
            for (Aircraft aircraft : airliner.getAircraftDirectory()) {
                for (Flight flight : aircraft.getFlightDirectory()) {
                    Object[] row = new Object[9];
                    row[0] = flight;
                    row[1] = airlinerName;
                    row[2] = flight.getDepartureLocation();
                    row[3] = flight.getArrivalLocation();
                    if (flight.isIsAvailable()) {
                        row[4] = "Available";
                    } else {
                        row[4] = "Cancelled";
                    }
                    row[5] = flight.getPrice();

                    if (aircraft.isHasWifi()) {
                        row[6] = "Available";
                    } else {
                        row[6] = "Not Available";
                    }
                    row[7] = flight.getFlightTime();
                    row[8] = flight.getDate();
                    defaultTableModel.addRow(row);
                }

            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        flightScheduleTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fromTextField = new javax.swing.JTextField();
        toTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        reserveBtn = new javax.swing.JButton();
        preferredTimeComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        maxTextField = new javax.swing.JTextField();
        SearchjButton = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        flightDateTxtField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        flightScheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight No", "Airliner", "From", "To", "Status", "Price (USD)", "WiFi", "Time", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(flightScheduleTable);
        if (flightScheduleTable.getColumnModel().getColumnCount() > 0) {
            flightScheduleTable.getColumnModel().getColumn(0).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(1).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(2).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(3).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(4).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(5).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(6).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(7).setResizable(false);
            flightScheduleTable.getColumnModel().getColumn(8).setResizable(false);
        }

        jLabel2.setText("From:*");

        jLabel4.setText("To:*");

        fromTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTextFieldActionPerformed(evt);
            }
        });
        fromTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fromTextFieldKeyTyped(evt);
            }
        });

        toTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                toTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Preferred Time:*");

        jLabel6.setText("Departure Date:*");

        reserveBtn.setText("Reserve Seat");
        reserveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveBtnActionPerformed(evt);
            }
        });

        preferredTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Morning", "Day time", "Evening" }));

        jLabel9.setText("Maximum Price:");

        maxTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxTextFieldKeyTyped(evt);
            }
        });

        SearchjButton.setText("Search Flight");
        SearchjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchjButtonActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel10.setText("(Format: mm/dd/yyyy)");

        flightDateTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightDateTxtFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MASTER FLIGHT SCHEDULE");
        jLabel1.setToolTipText("");

        jLabel3.setText("(USD)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(SearchjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(reserveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(preferredTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(flightDateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(flightDateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(maxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(preferredTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchjButton)
                            .addComponent(reserveBtn))))
                .addGap(0, 145, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fromTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromTextFieldActionPerformed

    private void reserveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = flightScheduleTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a flight", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Flight flight = (Flight) flightScheduleTable.getValueAt(selectedRow, 0);
            if (!flight.isIsAvailable()) {
                JOptionPane.showMessageDialog(null, "Sorry, the selected flight has been cancelled");
                populateFlight();
            } else {
                if (role.equalsIgnoreCase("Customer")) {
                    CustomerIdCheckJPanel customerIdCheckJPanel = new CustomerIdCheckJPanel(travelAgency, displayPanel, flight);
                    displayPanel.add("CustomerIdCheckJPanel", customerIdCheckJPanel);
                    CardLayout cardLayout = (CardLayout) displayPanel.getLayout();
                    cardLayout.next(displayPanel);
                }
                if (role.equalsIgnoreCase("Admin")) {
                    BookASeatJPanel bookASeatJPanel = new BookASeatJPanel(travelAgency, displayPanel, flight, "");
                    displayPanel.add("BookASeatJPanel", bookASeatJPanel);
                    CardLayout cardLayout = (CardLayout) displayPanel.getLayout();
                    cardLayout.next(displayPanel);
                }
            }
        }
    }//GEN-LAST:event_reserveBtnActionPerformed

    public ArrayList<Flight> search(String source, String destination, String date, String dayOfTime, Double maxPrice) {
        ArrayList<Flight> tempList = new ArrayList<Flight>();
        for (Airliner airliner : travelAgency.getAirlinerDirectory()) {
            for (Aircraft aircraft : airliner.getAircraftDirectory()) {
                for (Flight flight : aircraft.getFlightDirectory()) {
                    if (flight.getPrice() <= maxPrice && flight.getDepartureLocation().equalsIgnoreCase(source)
                            && flight.getDate().equalsIgnoreCase(date.trim())
                            && flight.getArrivalLocation().equalsIgnoreCase(destination)
                            && flight.getFlightTime().equalsIgnoreCase(dayOfTime)) {
                        tempList.add(flight);
                    }
                }
            }
        }
        if (tempList != null) {
            return tempList;
        }
        return null;
    }

    private boolean isValidString(String pattern, String str) {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        return m.matches();
    }

    private void SearchjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchjButtonActionPerformed
        // TODO add your handling code here:
        String flightDate = flightDateTxtField.getText();
        if (flightDate == null || flightDate.equals("") || !isValidString("^(((11|12)[/](0[1-9]|1[0-9]|2[0-9]|3[0-1])[/]20(19|20))|((0[1-9]|1[0-2])[/](0[1-9]|1[0-9]|2[0-9]|3[0-1])[/]2020))", flightDate)) {
            JOptionPane.showMessageDialog(null, "Please enter valid date in format mm/dd/yyyy");
            return;
        }
        if (fromTextField.getText().equals("") || toTextField.getText().equals("") || maxTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Fill All The Textfieds");
            populateFlight();
            return;
        } else {
            ArrayList<Flight> results = new ArrayList<Flight>();
            results = search(fromTextField.getText().trim(), toTextField.getText().trim(), flightDate, preferredTimeComboBox.getSelectedItem().toString().trim(), Double.parseDouble(maxTextField.getText().trim()));
            if (results != null && !results.isEmpty()) {
                DefaultTableModel defaultTableModel = (DefaultTableModel) flightScheduleTable.getModel();
                defaultTableModel.setRowCount(0);
                for (Flight result : results) {
                    String flightNumberToCheck = result.getFlightNumber();
                    String airlinerName = "";
                    for (Airliner airliner : travelAgency.getAirlinerDirectory()) {
                        airlinerName = airliner.getAirlinerName();
                        for (Aircraft aircraft : airliner.getAircraftDirectory()) {
                            for (Flight flight : aircraft.getFlightDirectory()) {
                                if (flightNumberToCheck.equals(flight.getFlightNumber())) {
                                    Object[] row = new Object[9];
                                    row[0] = flight;
                                    row[1] = airlinerName;
                                    row[2] = flight.getDepartureLocation();
                                    row[3] = flight.getArrivalLocation();
                                    if (flight.isIsAvailable()) {
                                        row[4] = "Available";
                                    } else {
                                        row[4] = "Canceled";
                                    }
                                    row[5] = flight.getPrice();

                                    if (aircraft.isHasWifi()) {
                                        row[6] = "Available";
                                    } else {
                                        row[6] = "Not Available";
                                    }
                                    row[7] = flight.getFlightTime();
                                    row[8] = flight.getDate();
                                    defaultTableModel.addRow(row);

                                }
                            }

                        }

                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Sorry !! No Flights exist for the given search inputs");
                fromTextField.setText("");
                toTextField.setText("");
                maxTextField.setText(defaultMax + "");
                flightDateTxtField.setText("");
            }

        }
    }//GEN-LAST:event_SearchjButtonActionPerformed

    private void fromTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromTextFieldKeyTyped
        // TODO add your handling code here:
        int code = evt.getKeyCode();
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && code != KeyEvent.VK_BACK_SPACE && !Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_fromTextFieldKeyTyped

    private void toTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toTextFieldKeyTyped
        // TODO add your handling code here:
        int code = evt.getKeyCode();
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && code != KeyEvent.VK_BACK_SPACE && !Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_toTextFieldKeyTyped

    private void maxTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxTextFieldKeyTyped
        // TODO add your handling code here:
        char enteredChar = evt.getKeyChar();
        if (!Character.isDigit(enteredChar) || (enteredChar == KeyEvent.VK_BACK_SPACE) || (enteredChar == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_maxTextFieldKeyTyped

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        displayPanel.remove(this);
        CardLayout cardLayout = (CardLayout) displayPanel.getLayout();
        cardLayout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void flightDateTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightDateTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flightDateTxtFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchjButton;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField flightDateTxtField;
    private javax.swing.JTable flightScheduleTable;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxTextField;
    private javax.swing.JComboBox<String> preferredTimeComboBox;
    private javax.swing.JButton reserveBtn;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables
}
